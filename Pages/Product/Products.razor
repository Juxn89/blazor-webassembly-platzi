@using blazor_webassembly_platzi.Services
@using blazor_webassembly_platzi.Shared
@using blazor_webassembly_platzi.Models

@page "/product"
@inject ILogger<Products> _looger
@inject IProductService _productService
@inject NavigationManager navigationManager
@inject IJSRuntime jSRuntime
@inject IToastService toastService

<PageTitle>Products</PageTitle>
<ModuleTitle Title="Products" />

<button class="btn btn-dark" @onclick="@(() => navigationManager.NavigateTo("/product/add"))">
Add new product
</button>

@if(products.Any()) {
	<div class="products-container">
		@foreach(var product in products) {
			<div class="card">
				<img class="card-img-top" src="@product.images[0]" alt="@product.title" loading="lazy" width="270"/>
				<div>
					<h4><b>@product.title</b></h4>
					<p>@product.price.ToString("C")</p>
					<button
						title="Delete"
						class="btn btn-danger btn-delete"
						@onclick="@( () => DeleteProduct(product) )"
					>
						<span class="bi bi-trash">Delete</span>
					</button>
				</div>
			</div>
		}	
	</div>
}else {
	<p> There are not product to show </p>
}

@code {
	private List<Product> products;

	protected override async Task OnInitializedAsync() {
		await GetProducts();
	}

	private async Task GetProducts() {
		products = await _productService.Get();
	}

	private async Task DeleteProduct(Product product) {
		var confirmProdcut = await jSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.title}?");

		if(!confirmProdcut)
			return;

		await _productService.Delete(product.id);
		toastService.ShowSuccess("Product deleted!");
		await GetProducts();
	}
}
